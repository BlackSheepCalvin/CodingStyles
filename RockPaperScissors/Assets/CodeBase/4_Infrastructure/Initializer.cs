using UnityEngine;
using System;
using System.Linq;
using Newtonsoft.Json;

// Hint: Hacks / hacky
// Hint: data driven programming. Looks simple, but at the cost of a super complicated GetVariationFor(VariationType variation) method
// plus if you dont have a class with exact name of VariationType, there is gonna be an error
// plus if someone would search for the creation of "new HelloWorld(" for example, they would not find this place...
// so this kind of magic should only be used if this is the very foundation of the project, well documented, and everybody is aware of it.
// the alternative is to have a dictionary like so (but here we have to type HelloWorld 3 times! (2 in factory, 1 in enum)):
/* 
    variationFactory = new Dictionary<VariationType, Func<Printer, Variation>>()
    {
        { VariationType.HelloWorld, (printer) => new HelloWorld(printer) }
    };*/
public enum VariationType
{ // every type here should have a class equivavent in the project, with the exact same name!
    HelloWorld,
    SimplestOne,
    TDD,
    TDDBetter,
    EventsVariation,
    DataDrivenProgramming,
    Functional
}

// Hint: Open-Closed principle
public class Initializer : MonoBehaviour
{
    // the implementation variation that will be initialized at start
    public VariationType currentVariation = VariationType.HelloWorld;
    private VariationType _previousVariation;

    private KeyInputReader inputReader;

    void Start()
    {
        _previousVariation = currentVariation;
        inputReader = GetComponent<KeyInputReader>();
        ServiceProvider.DataProvider = GetComponent<JsonReader>();
        ServiceProvider.Random = new SystemRandom();
        UpdateVariation();
    }

    private void Update()
    {
        if (_previousVariation != currentVariation)
        {
            _previousVariation = currentVariation;
            UpdateVariation();
        }
    }

    private void UpdateVariation()
    {
        var variation = GetVariationFor(currentVariation);
        inputReader.InputUser = variation;
        variation?.Start();
    }

    private Variation GetVariationFor(VariationType variation)
    { // Magic happens here: the enum is converted to an actual instance of a class with the same name as the enum!
      // its low level code, i dont think its important to understand whats happening here, its generated by AI
        var printer = new DebugLogPrinter();

        string className = variation.ToString();

        Type type = AppDomain.CurrentDomain.GetAssemblies()
        .SelectMany(a => a.GetTypes())
        .FirstOrDefault(t => t.Name == className);// this is functional programming, using Linq if you are still curious

        if (type == null)
        {
            Debug.LogError($"Class {className} not found in any loaded assembly.");
            return null;
        }

        object instance = Activator.CreateInstance(type, printer);

        if (instance is Variation variationInstance)
        {
            return variationInstance;
        }

        Debug.LogError($"Failed to create instance of {className}");
        return null;
    }
}